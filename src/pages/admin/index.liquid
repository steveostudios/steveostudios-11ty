---
title: Admin
---
<div class="page admin">
  <div class="buttons">
    <input class="code code_deploy" type="password" pattern="[0-9]*" inputmode="numeric" />
    <button id="submit_deploy" class="save" disabled>Deploy</button>
  </div>
  <h2 data-id="start" class="visible"><div class="toggle">{{ "/src/img/icons/chevron-down-solid.svg" | svgContents: "icon"  }}</div><span>Start a Book</span></h2>
  <section class="section_start visible">
    {% assign notStarted_books = books | notStarted | sort: "title"  %}
    <div class="table">
      {% for book in notStarted_books %}
      {% assign src = book['cover'][0].thumbnails.large.url %}
      {% assign alt = book['title'] %}
        <div class="book" data-id="{{ book.id }}">
          <div class="book-section">
            <div class="cover">{% image src, alt, "books" %}</div>
            <div class="title">{{ book.title }}</div>
          </div>
          <div class="book-section">
            <div class="pages"><input data-id="{{ book.id }}" class="start_pagesFinish" type="number" min="0" max="{{book.pages}}" value="{{ book.pagesFinish }}" inputmode="numeric"/>/{{ book.pages }}</div>
            <div class="date"><input type="date" data-id="{{ book.id }}" class="start_dateStart" /></div>
          </div>
        </div>
      {% endfor %}
    </div>
    <div class="buttons">
      <input class="code code_start" type="password" pattern="[0-9]*" inputmode="numeric" />
      <button id="reset_start" class="reset" disabled>Reset</button>
      <button id="submit_start" class="save" disabled>Save</button>
    </div>
  </section>
  <h2 data-id="read" class="visible"><div class="toggle">{{ "/src/img/icons/chevron-down-solid.svg" | svgContents: "icon"  }}</div><span>Read a Book</span></h2>
  <section class="section_read visible">
    {% assign current_books = books | currentlyReading | sort: "dateStart" | reverse %}
    <div class="table">
      {% for book in current_books %}
        {% assign src = book['cover'][0].thumbnails.large.url %}
        {% assign alt = book['title'] %}
        <div class="book" data-id="{{ book.id }}">
          <div class="book-section">
            <div class="cover">{% image src, alt, "books" %}</div>
            <div class="title">{{ book.title }}</div>
          </div>
          <div class="book-section"> 
            <div class="pages"><input data-id="{{ book.id }}" class="read_pagesFinish" type="number" min="0" max="{{book.pages}}" value="{{ book.pagesFinish }}" data-initialValue="{{ book.pagesFinish }}" inputmode="numeric"/>/{{ book.pages }}</div>
            <div class="date"><input type="date" data-id="{{ book.id }}" class="read_dateStart" value="{{ book.dateStart }}" disabled/></div>
          </div>
        </div>
      {% endfor %}
    </div>
    <div class="buttons">
      <input class="code code_read" type="password" pattern="[0-9]*" inputmode="numeric" />
      <button id="reset_read" class="reset" disabled>Reset</button>
      <button id="submit_read" class="save" disabled>Save</button>
    </div>

  </section>
  <h2 data-id="finish"  class="visible"><div class="toggle">{{ "/src/img/icons/chevron-down-solid.svg" | svgContents: "icon"  }}</div><span>Finish a Book</span></h2>
  <section class="section_finish visible">
    {% assign current_books = books | currentlyReading | sort: "dateStart" | reverse %}
    <div class="table">
      {% for book in current_books %}
        {% assign src = book['cover'][0].thumbnails.large.url %}
        {% assign alt = book['title'] %}
        <div class="book" data-id="{{ book.id }}">
          <div class="book-section">
            <div class="cover">{% image src, alt, "books" %}</div>
            <div class="title">{{ book.title }}</div>
          </div>
          <div class="book-section">
            <div class="stars">
              <div>
              {% for i in (1..5) %}
                <button class="star finish_stars" data-id="{{ book.id }}" data-value="{{ i }}">{{ "/src/img/icons/star-solid.svg" | svgContents: "icon"  }}</button>
              {% endfor %}
              </div>
            </div>
          </div>
          <div class="book-section">
            <div class="date"><input type="date" data-id="{{ book.id }}" class="finish_dateFinish"  /></div>
          </div>
        </div>
      {% endfor %}
    </div>
    <div class="buttons">
      <input class="code code_finish" type="password" pattern="[0-9]*" inputmode="numeric" />
      <button id="reset_finish" class="reset" disabled>Reset</button>
      <button id="submit_finish" class="save" disabled>Save</button>
    </div>
  </section>

<script>
  // start dom elements
  const headers_all = document.querySelectorAll("h2");
  const button_start_save = document.querySelector("#submit_start");
  const button_start_reset = document.querySelector("#reset_start");
  const input_start_code = document.querySelector(".code_start");
  const inputs_start_pagesFinish = document.querySelectorAll(".start_pagesFinish");
  const inputs_start_dateStart = document.querySelectorAll(".start_dateStart");
  const inputs_read_pagesFinish = document.querySelectorAll(".read_pagesFinish");
  const input_read_code = document.querySelector(".code_read");
  const button_read_reset = document.querySelector("#reset_read");
  const button_read_save = document.querySelector("#submit_read");
  const input_finish_code = document.querySelector(".code_finish");
  const inputs_finish_dateFinish = document.querySelectorAll(".finish_dateFinish");
  const button_finish_reset = document.querySelector("#reset_finish")
  const button_finish_save = document.querySelector("#submit_finish");
  const buttons_finish_stars = document.querySelectorAll(".finish_stars");
  const inputs_all_code = document.querySelectorAll(".code");
  const buttons_all_reset = document.querySelectorAll(".reset");
  const buttons_all_save = document.querySelectorAll(".save");
  const input_deploy_code = document.querySelector(".code_deploy");
  const button_desploy_save = document.querySelector("#submit_deploy")

  const allUpdates = {
    start:[],
    read: [],
    finish: [],
    protectedIds: []
  }

  const h2 = headers_all.forEach(toggle => toggle.addEventListener("click", (e) => {
    e.preventDefault();
    if (toggle.classList.contains('visible')) {
        toggle.classList.remove('visible');
        document.querySelector(`.section_${e.currentTarget.dataset.id}`).classList.remove("visible")
    } else {
        toggle.classList.add('visible');
        document.querySelector(`.section_${e.currentTarget.dataset.id}`).classList.add("visible")
    }
  }))

  const validateAll = () => {
    // reset buttons
    if (allUpdates.start.length || input_start_code.value.length) {
      button_start_reset.disabled = false;
    } else {
      button_start_reset.disabled = true;
    }
    if (allUpdates.read.length || input_read_code.value.length) {
      button_read_reset.disabled = false;
    } else {
      button_read_reset.disabled = true;
    }
    if (allUpdates.finish.length || input_finish_code.value.length) {
      button_finish_reset.disabled = false;
    } else {
      button_finish_reset.disabled = true;
    }
    // save buttons
    const allInputsFilled_start = (item) => Object.hasOwn(item, "dateStart") && Object.hasOwn(item, "pagesFinish");
    if (!allUpdates.start.length || !allUpdates.start.every(allInputsFilled_start) || input_start_code.value.length !== 4)  {
      button_start_save.disabled = true;
    } else {
      button_start_save.disabled = false;
    }
    const allInputsFilled_read = (item) => Object.hasOwn(item, "pagesFinish"); 
    if (!allUpdates.read.length || !allUpdates.read.every(allInputsFilled_read) || input_read_code.value.length !== 4)  {
      button_read_save.disabled = true;
    } else {
      button_read_save.disabled = false;
    }
    const allInputsFilled_finish = (item) => Object.hasOwn(item, "dateFinish") && Object.hasOwn(item, "stars") && Object.hasOwn(item, "pagesFinish"); 
    if (!allUpdates.finish.length || !allUpdates.finish.every(allInputsFilled_finish) || input_finish_code.value.length !== 4)  {
      button_finish_save.disabled = true;
    } else {
      button_finish_save.disabled = false;
    }
    // deploy button
    if (!allUpdates.protectedIds.length || input_deploy_code.value.length !== 4) {
      button_desploy_save.disabled = true;
    } else {
      button_desploy_save.disabled = false;
    }
  }

  const toggleProcessing = (value) => {
    console.log(value)
    inputs_start_pagesFinish.forEach(item => item.disabled = value);
    inputs_start_dateStart.forEach(item => item.disabled = value);
    inputs_read_pagesFinish.forEach(item => item.disabled = value);
    inputs_finish_dateFinish.forEach(item => item.disabled = value);
    buttons_finish_stars.forEach(item => item.disabled = value);
    inputs_all_code.forEach(item => item.disabled = value);
    buttons_all_reset.forEach(item => item.disabled = value);
    buttons_all_save.forEach(item => item.disabled = value);
  }

  const updateBook = (item, updateId) => {
    if (!allUpdates[updateId].length || !allUpdates[updateId].find(el => el.id === item.id)) {
      allUpdates[updateId].push(item)
      return
    } 
    allUpdates[updateId] = allUpdates[updateId].map(el => {
      if (el.id === item.id) {
        return {...el, ...item};
      } else {
        return el
      }
    })
  }

  const protectRows = (updateId) => {
    allUpdates.protectedIds = [...allUpdates.protectedIds, ...allUpdates[updateId].map(item => item.id)]
    allUpdates.protectedIds.forEach(id => {
      document.querySelectorAll(`tr[data-id="${id}"]`).forEach(row => row.classList.add("protected"))
      document.querySelectorAll(`input[data-id="${id}"]`).forEach(input => input.disabled = true)
    })
    allUpdates[updateId] = [];
  }

  // all 
  const onCodeChange = inputs_all_code.forEach(input => input.addEventListener("keyup", (e) => {
    validateAll()
  }))

  // start
  const start_dateStart = inputs_start_dateStart.forEach(input => input.addEventListener("change", (e) => {
    updateBook({id: e.currentTarget.dataset.id, dateStart: e.currentTarget.value}, "start");
    validateAll()
  }))

  const start_pagesFinish = inputs_start_pagesFinish.forEach(input => input.addEventListener("change", (e) => {
    updateBook({id: e.currentTarget.dataset.id, pagesFinish: parseInt(e.currentTarget.value)}, "start")
    validateAll()
  }))

  const startSave = button_start_save.addEventListener("click", (e) => {
    postRequest( "start", {updates: allUpdates.start} )
  })

  const startReset = button_start_reset.addEventListener("click", (e) => {
    allUpdates.start = [];
    input_start_code.value = "";
    inputs_start_pagesFinish.forEach(input => input.value = "")
    inputs_start_dateStart.forEach(input => input.value = "")
    validateAll()
  })

  // Read
  const read_pagesFinish = inputs_read_pagesFinish.forEach(input => input.addEventListener("change", (e) => {
    updateBook({id: e.currentTarget.dataset.id, pagesFinish: parseInt(e.currentTarget.value)}, "read");
    validateAll()
  }))

  const readSave = button_read_save.addEventListener("click", async (e) => {
    postRequest("read", {updates: allUpdates.read} )
  })

  const readReset = button_read_reset.addEventListener("click", (e) => {
    allUpdates.read = [];
    input_read_code.value = "";
    inputs_read_pagesFinish.forEach(input => input.value = input.dataset.initialvalue)
    validateAll()
  })

  // Finish
  const finish_stars = buttons_finish_stars.forEach(button => button.addEventListener("click", (e) => {
    updateBook({id: e.currentTarget.dataset.id, stars: parseInt(e.currentTarget.dataset.value), pagesFinish: null}, "finish");
    document.querySelectorAll(`[data-id="${e.currentTarget.dataset.id}"].finish_stars`).forEach(button => {
      if (button.dataset.value <= parseInt(e.currentTarget.dataset.value)) {
        button.classList.add("active");
      } else {
        button.classList.remove("active");
      }
    })
    validateAll()
  }))

  const finish_dateFinish = inputs_finish_dateFinish.forEach(input => input.addEventListener("change", (e) => {
    updateBook({id: e.currentTarget.dataset.id, dateFinish: e.currentTarget.value, pagesFinish: null}, "finish");
    validateAll();
  }))

  const finishSave = button_finish_save.addEventListener("click", async (e) => {
    postRequest("finish", {updates: allUpdates.finish} );

  })

  const finishReset = button_finish_reset.addEventListener("click", (e) => {
    allUpdates.finish = [];
    input_finish_code.value = "";
    inputs_finish_dateFinish.forEach(input => input.value = "");
    buttons_finish_stars.forEach(button => button.classList.remove("active"));
    validateAll()
  })

// Deploy
  const deploy = document.querySelector("#submit_deploy").addEventListener("click", async (e) => {
    postDeploy("deploy", {})
  })

  const postRequest = async (type, data) => {
    toggleProcessing(true);
    const code = document.querySelector(`.code_${type}`).value;
    const url = type === "deploy" ? "deploy" : "updateBook"; 
    const response = await fetch(`{{ env.NETLIFY_FUNCTIONS_URL }}/${url}`, {
      method: "POST",
      mode: "cors",
      header: {
        "Origin": "*",
        "Access-Control-Request-Method": "POST"
      },
      body: JSON.stringify({code, ...data}),
    });

    const json = await response.json(); 
    console.log(json);

    if (json.success) {
      if (type === "deploy") {

      } else {
        protectRows(type);
      }
    }
    inputs_all_code.value = ""
    toggleProcessing(false);
    validateAll()
  }

</script>
</div>